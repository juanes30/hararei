/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.efycolombia.hararei

import com.efycolombia.hararei.model.HolidayDTO
import com.efycolombia.hararei.utils.*
import java.util.*
import kotlin.math.floor

class Library {
    fun getColombiaHolidaysByYear(year: String? = null): List<HolidayDTO> {
        validations(year)
        val normalHolidays = Constants.HOLIDAYS.map {
            val holiday = nextDay("$year-${it.day}", it.daysToSum)
            val celebrationDay = "$year-${it.day}"
            val celebration = it.celebration
            HolidayDTO(holiday, celebrationDay, celebration)
        }
        val sunday = wtfAlgorithm(year?.toInt() ?: 0).toDate()
        val easterWeekHolidays = Constants.EASTER_WEEK_HOLIDAYS.map {
            val day = Date(sunday.time + it.day.toLong().times(Constants.MILLISECONDS_DAY))
            val newDate = getFormattedDate(day.year(), day.addDay().month() + 1, day.addDay().getDayOfMonth())
            val holiday = nextDay(newDate, it.daysToSum)
            val celebrationDay = getFormattedDate(day.year(), day.addDay().month() + 1, day.addDay().getDayOfMonth())
            val celebration = it.celebration
            HolidayDTO(holiday, celebrationDay, celebration)
        }
        val mergeList = normalHolidays + easterWeekHolidays
        return mergeList.sortedBy { it.holiday }
    }

    private fun validations(year: String?) {
        if (year.isNullOrEmpty()) {
            throw IllegalArgumentException("No year provided")
        }
        if (year.toIntOrNull() == null) {
            throw IllegalArgumentException("The year is not a number")
        }

        if (year.toInt() < 1970 || year.toInt() > 99999) {
            throw IllegalArgumentException("The year should be greater to 1969 and smaller to 100000")
        }
    }


    private fun nextDay(day: String, sum: Int): String {
        val date = day.toDate()
        val newDate = if (sum == 7) {
            date
        } else {
            Date(date.time + (((7 + sum) - date.getUTCDay()) % 7) * Constants.MILLISECONDS_DAY)
        }.addDay()
        return getFormattedDate(newDate.year(), newDate.month() + 1, newDate.getDayOfMonth())
    }

    private fun getFormattedDate(year: Int, month: Int, day: Int): String {
        return "${year}-${month.addZero()}-${day.addZero()}"
    }

    private fun wtfAlgorithm(year: Int): String {
        val a = year % 19;
        val b = floor(year.toDouble() / 100);
        val c = year % 100;
        val d = floor(b / 4);
        val e = b % 4;
        val f = floor((b + 8) / 25);
        val g = floor((b - f + 1) / 3);
        val h = (19 * a + b - d - g + 15) % 30;
        val i = floor(c.toDouble() / 4);
        val k = c % 4;
        val l = (32 + 2 * e + 2 * i - h - k) % 7;
        val m = floor((a + 11 * h + 22 * l) / 451);
        val n = h + l - 7 * m + 114;
        val month = floor(n / 31);
        val day = 1 + (n % 31);
        return getFormattedDate(year, month.toInt(), day.toInt());
    }
}
